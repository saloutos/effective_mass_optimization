% Generating random linear task-space trajectories for evaluating the effective mass
% optimization

% Andrew SaLoutos
% 4/16/2021

% modify to generate sinusoids starting at random points? traj = [x0,y0,a,T], run for a single period?
% add a random rotation angle theta? 

%% Setup parameters

N = 30; % number of trajectories

% choose to discretize arena space, pick random points, rather than generate random coordinates 
steps = 101;
arena_x = linspace( 0.4, 1.2, steps);
arena_y = linspace(-0.4, 0.4, steps);

sin_steps = 21;
amplitudes = linspace(0.1, 0.3, sin_steps);
periods = linspace(0.2,0.6, sin_steps);
thetas = linspace(-pi/2, pi/2, steps);

trajectories = zeros(4,N); % each column is [x0;y0;T;a;th]
num_pts = 51; % number of pts in trajectory
% eventually save longer sets of points? or let optimization script run linspace() to fill in trajectories

%% Select trajectory endpoints

% for N trajectories...
pts = zeros(2,num_pts,N);
for ii=1:N
    % uniform random sample for first and second points
    pt0 = [arena_x(randi(steps));arena_y(randi(steps))];
    
    T = periods(randi(sin_steps));
    a = amplitudes(randi(sin_steps));
    th = thetas(randi(steps));
    
    % get points
    pts_x = linspace(0,T,num_pts);
    pts_y = a*sin((2*pi/T)*pts_x);
    pts_i = [pts_x;pts_y];
    % rotate by theta and translate by pt0
    Rth = [cos(th), -sin(th); sin(th), cos(th)];
    for jj=1:num_pts
        pts_i(:,jj) = pt0 + Rth*pts_i(:,jj);
    end
    % save in pts array
    pts(:,:,ii) = pts_i;
    
    % save data
    trajectories(:,ii) = [pt0; T; a; th];
end

%% Plot random trajectories
figure; hold on;
for ii=1:N
    % just use pts array    
    pts_plt = pts(:,:,ii);
    plot(pts_plt(1,:),pts_plt(1,:),'-','LineWidth',1.5);
end
axis equal;
xlim([arena_x(1),arena_x(end)]); ylim([arena_y(1),arena_y(end)]);
xlabel('X'); ylabel('Y'); title('Randomly Generated  Trajectories');

